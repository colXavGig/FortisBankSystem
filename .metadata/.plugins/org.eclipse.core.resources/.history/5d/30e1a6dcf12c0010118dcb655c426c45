package client;

import java.awt.CardLayout;
import java.awt.LayoutManager;

import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

import bus.BusinessException;
import bus.model.user.BankClient;
import bus.model.user.BankManager;
import bus.model.user.User;
import bus.model.user.UserType;
import bus.service.Authentification;
import client.helper.CLI;
import dto.UserDTO;
import utils.UserCollection;

import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.awt.event.ActionEvent;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextArea;

public class RegisterPanel extends JPanel {

	
	private static final long serialVersionUID = 5818133698486830709L;
	private MainFrame parentFrame;
	private JTextField firstnameField;
	private JTextField lastnameField;
	private JTextField nipField;
	private JTextField emailField;
	private JTextField phoneField;

	/**
	 * @wbp.parser.constructor
	 */
	public RegisterPanel(MainFrame parent) {
		init(parent);
	}

	public RegisterPanel(MainFrame parent, LayoutManager layout) {
		super(layout);
		init(parent);
	}

	public RegisterPanel(MainFrame parent, boolean isDoubleBuffered) {
		super(isDoubleBuffered);
		init(parent);
	}

	public RegisterPanel(MainFrame parent, LayoutManager layout, boolean isDoubleBuffered) {
		super(layout, isDoubleBuffered);
		init(parent);
	}
	
	private void init(MainFrame parent) {
		parentFrame = parent;
		
		
		setLayout(null);
		
		JButton loginBtn = new JButton("Login");
		loginBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				parentFrame.showLogin();
			}
		});
		loginBtn.setBounds(162, 271, 89, 23);
		add(loginBtn);
		
		JButton registerBtn = new JButton("Register");
		registerBtn.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				// change panel of parent to register panel
			}
		});
		registerBtn.setBounds(379, 271, 89, 23);
		add(registerBtn);
		
		JLabel lblNewLabel = new JLabel("User type");
		lblNewLabel.setBounds(87, 26, 78, 14);
		add(lblNewLabel);
		
		JComboBox comboBox = new JComboBox();
		comboBox.setModel(new DefaultComboBoxModel(UserType.values()));
		comboBox.setBounds(192, 22, 96, 22);
		add(comboBox);
		
		JLabel lblNewLabel_1 = new JLabel("Firstname:");
		lblNewLabel_1.setBounds(85, 51, 80, 14);
		add(lblNewLabel_1);
		
		JLabel lblNewLabel_1_1 = new JLabel("Lastname:");
		lblNewLabel_1_1.setBounds(322, 51, 80, 14);
		add(lblNewLabel_1_1);
		
		JLabel lblNewLabel_1_2 = new JLabel("PIN:");
		lblNewLabel_1_2.setBounds(322, 95, 80, 14);
		add(lblNewLabel_1_2);
		
		JLabel lblNewLabel_1_3 = new JLabel("Address:");
		lblNewLabel_1_3.setBounds(85, 184, 80, 14);
		add(lblNewLabel_1_3);
		
		JLabel lblNewLabel_1_4 = new JLabel("Email:");
		lblNewLabel_1_4.setBounds(85, 95, 80, 14);
		add(lblNewLabel_1_4);
		
		JLabel lblNewLabel_1_5 = new JLabel("Phone:");
		lblNewLabel_1_5.setBounds(85, 144, 80, 14);
		add(lblNewLabel_1_5);
		
		firstnameField = new JTextField();
		firstnameField.setBounds(192, 55, 86, 20);
		add(firstnameField);
		firstnameField.setColumns(10);
		
		lastnameField = new JTextField();
		lastnameField.setColumns(10);
		lastnameField.setBounds(412, 48, 86, 20);
		add(lastnameField);
		
		nipField = new JTextField();
		nipField.setColumns(10);
		nipField.setBounds(412, 92, 86, 20);
		add(nipField);
		
		emailField = new JTextField();
		emailField.setColumns(10);
		emailField.setBounds(192, 92, 86, 20);
		add(emailField);
		
		phoneField = new JTextField();
		phoneField.setColumns(10);
		phoneField.setBounds(192, 141, 86, 20);
		add(phoneField);
		
		JTextArea adressTextArea = new JTextArea();
		adressTextArea.setBounds(192, 179, 276, 59);
		add(adressTextArea);
		
		setVisible(true);
	}
	
	public void register() {
		User newUser = null;

		while (newUser == null) {
			UserType choice = null;
			while (choice == null) {
				CLI.println("Available types:");
				for (var t : UserType.values()) {
					CLI.println(t.name());
				}
				try {
					choice = UserType.valueOf(CLI.getString("Enter user type: "));
				} catch (IllegalArgumentException e) {
					CLI.errPrint("Invalid user type. Please try again.\n");
					CLI.promptEnterToClear();
					
				}
			}
			var firstName = CLI.getString("firstname: ");
			var lastName = CLI.getString("lastname: ");
			var nip = CLI.getString("nip: ");
			var address = CLI.getString("address: ");
			var email = CLI.getString("email: ");
			var telephone = CLI.getString("telephone: ");
			switch (choice.ordinal()) {
				case 0: newUser = new BankClient(1000,
						lastName, 
						firstName, 
						nip, 
						address, 
						email, 
						telephone 
						);
				break;
				case 1: newUser = new BankManager(0, 
						lastName, 
						firstName, 
						nip, 
						address, 
						email, 
						telephone, 
						CLI.getString("role: ") 
						);
				break;
				default: CLI.errPrint(choice + " invalide");
			}
			try {
				Authentification.register(newUser);
			} catch (Exception e) {
				CLI.getString("Error while registering: " + e.getMessage());
				newUser = null;
			}
		}
		CLI.println("User registered successfully!");
		CLI.promptEnterToClear();
	}
}
